@{
    var culture = _SiteService.GetCurrentCulture();
}

@section Styles {
    <style>

    </style>
}

<div class="container mt-5">
    <div class="card container">
        <div class="card-body">
            <div class="col-xl-11 col-lg-10 col-md-9 col-12 ">
                <div class="row align-items-center mt-5">
                    <div class="col-md-2 col-xxl-1">
                        <label for="inputFiles" class="col-form-label ">檔案</label>
                    </div>
                    <div class="col-md-8 col-xxl-9  mt-0 mt-md-3">
                        <!-- data-id 設定初始值 -->
                        <input type="file" data-id="D323C2EA-DDC2-4782-AB3D-EDF9C6D4CF1D" id="inputFiles" class="form-control" aria-describedby="inputFiles">
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="module">
        //載入多國語系
        import FilePond_lang from '/lib/filepond/locale/@(culture).js';
        $(()=>{
            FilePond.registerPlugin(FilePondPluginFileValidateType);
            FilePond.registerPlugin(FilePondPluginImagePreview);
            FilePond.registerPlugin(FilePondPluginFileMetadata);
            FilePond.registerPlugin(FilePondPluginGetFile);
            FilePond.registerPlugin(FilePondPluginMoveFile);
            FilePond.registerPlugin(FilePondPluginMediaPreview);
            FilePond.registerPlugin(FilePondPluginPdfPreview);
            FilePond.setOptions(FilePond_lang);
        })
        $(async () => {
            const $inputFile = $('#inputFiles');

            //初始化數據
            let files = [];
            if ($inputFile.attr('data-id').length > 0){
                files.push({
                    source: `${$inputFile.attr('data-id')}`,
                    options: {
                        type: 'local'
                    }
                });
            }
            //Create FilePond
            //參數 https://pqina.nl/filepond/docs/api/instance/properties/
            const pond = FilePond.create($inputFile[0], {
                credits: true,
                disabled: false,
                allowMultiple: true,
                acceptedFileTypes: null,
                fileValidateTypeLabelExpectedTypesMap: null,
                allowPdfPreview: true,
                pdfPreviewHeight: 320,
                pdfComponentExtraParams: 'toolbar=0&view=fit&page=1',
                files: files,
                server:
                {
                    //上傳
                    process: (fieldName, file, metadata, load, error, progress, abort, transfer, options) => {
                        // fieldName is the name of the input field
                        // file is the actual file object to send
                        const formData = new FormData();
                        formData.append(fieldName, file, file.name);
                        formData.append('message', 'FilePond');// 對應/Streaming/Upload,  不然不需要此行

                        const request = new XMLHttpRequest();
                        request.open('POST', '/Streaming/Upload');

                        // Should call the progress method to update the progress to 100% before calling load
                        // Setting computable to false switches the loading indicator to infinite mode
                        request.upload.onprogress = (e) => {
                            progress(e.lengthComputable, e.loaded, e.total);
                        };

                        // Should call the load method when done and pass the returned server file id
                        // this server file id is then used later on when reverting or restoring a file
                        // so your server knows which file to return without exposing that info to the client
                        request.onload = function () {
                            if (request.status >= 200 && request.status < 300) {
                                // the load method accepts either a string (id) or an object
                                load(JSON.parse(request.responseText).ids[0]);
                            }
                            else {
                                // Can call the error method if something is wrong, should exit after
                                error('oh no');
                            }
                        };

                        request.send(formData);

                        // Should expose an abort method so the request can be cancelled
                        return {
                            abort: () => {
                                // This function is entered if the user has tapped the cancel button
                                request.abort();

                                // Let FilePond know the request has been cancelled
                                abort();
                            }
                        };
                    },
                    //下載
                    load: async (source, load, error, progress, abort, headers) => {
                        // Should request a file object from the server here
                        const file = await (async (source) => {
                            try {
                                const settings = {
                                    headers: {
                                        'user-agent': navigator.userAgent,
                                        'content-type': 'application/json'
                                    },
                                    method: 'GET'
                                };
                                const fetchResponse = await fetch(`/Streaming/Download/${source}`, settings);
                                const blob = await fetchResponse.blob();
                                //解析檔名
                                let filename;
                                const disposition = decodeURIComponent(fetchResponse.headers.get('content-disposition'));
                                if (disposition && disposition.match(/attachment/)) {
                                    filename = disposition.replace(/^.*filename\*=UTF-8[\u0027][\u0027](.+)$/, '$1')
                                    filename = filename && filename !== '' ? filename : 'file';
                                }
                                return blobToFile(blob, filename);
                            } catch (e) {
                                return e;
                            }
                        })(source);
                        // Can call the error method if something is wrong, should exit after
                        error('oh my goodness');

                        // Can call the header method to supply FilePond with early response header string
                        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders
                        //headers(headersString);

                        // Should call the progress method to update the progress to 100% before calling load
                        // (endlessMode, loadedSize, totalSize)
                        progress(true, 1024, 1024);

                        // Should call the load method with a file object or blob when done
                        load(file);

                        // Should expose an abort method so the request can be cancelled
                        return {
                            abort: () => {
                                // User tapped cancel, abort our ongoing actions here

                                // Let FilePond know the request has been cancelled
                                abort();
                            }
                        };
                    }
                },
                beforeAddFile: (data) => {
                    return true;
                },
                labelFileProcessingError: (error) => {
                    let data = JSON.parse(error.body);
                    return data.File;
                }
            });
        });
        function blobToFile(theBlob, fileName) {
            //A Blob() is almost a File() - it's just missing the two properties below which we will add
            theBlob.lastModifiedDate = new Date();
            theBlob.name = fileName;
            //return theBlob;
            return new File([theBlob], fileName, { type: theBlob.type });
        }
    </script>
}